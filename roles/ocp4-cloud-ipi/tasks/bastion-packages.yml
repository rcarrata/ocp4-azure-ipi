---

## Packages
- name: Ensure requirement are installed
  yum:
    name: "{{ packages }}"
  vars:
    packages:
     - podman
     - httpd-tools
     - squid
     - python3-psutil

## Packages
- name: Ensure requirement are installed
  yum:
    name: "{{ packages }}"
  vars:
    packages:
     - epel-release
  when: azure_vm_image_offer == "CentOS"

# Split in two different yum, because needs the epel-release for be installed
- name: Ensure Required Python Libs are installed
  yum:
    name: "{{ packages }}"
  vars:
    packages:
     - python3-passlib
     - python3-bcrypt
     - bind-utils
  when: azure_vm_image_offer == "CentOS"

# The squid is only needed in private installations for acting as a proxy
- name: Enable and start squid
  systemd:
    name: squid
    enabled: yes
    state: started
  when:
    - mode == "private"
    - egress == "proxy"

- name: Create directory for registry contents
  file:
    path: "/opt/registry/{{ item }}"
    state: directory
    recurse: true
  loop:
    - auth
    - certs
    - data

- name: Install Kubernetes package with pip
  command: "pip3 install {{ item }}"
  when:
    - mode == "private" or mode == "disconnected"
  loop:
    - kubernetes
    - openshift

- block:
    ## Certificates
    - name: Generate an OpenSSL private key.
      openssl_privatekey:
        path: "{{ registry_path }}/registry.key"

    - name: Generate an OpenSSL CSR.
      openssl_csr:
        path: "{{ registry_path }}/registry.csr"
        privatekey_path: "{{ registry_path }}/registry.key"
        common_name: "{{ registry_cn }}"
        basic_constraints: "CA:TRUE"

    - name: Generate a Self Signed OpenSSL certificate.
      openssl_certificate:
        path: "{{ registry_path }}/registry.crt"
        privatekey_path: "{{ registry_path }}/registry.key"
        csr_path: "{{ registry_path }}/registry.csr"
        provider: selfsigned

    - name: Check cert in anchors
      stat:
        path: /etc/pki/ca-trust/source/anchors/registry.crt
      register: stat_result

    - name: Copy cert
      command: "cp {{ registry_path }}/registry.crt /etc/pki/ca-trust/source/anchors/registry.crt"
      when: stat_result.stat.exists == False

    - name: Update CA
      command: update-ca-trust
      when: stat_result.stat.exists == False

    ## Htpasswd Users for the Registry
    - name: Create htpasswd file
      htpasswd:
        path: /opt/registry/auth/htpasswd
        crypt_scheme: bcrypt
        name: "{{ registry_user }}"
        password: "{{ registry_password }}"
  when:
    - mode == "disconnected"
